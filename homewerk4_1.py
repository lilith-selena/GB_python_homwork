"""1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных
значений необходимо запускать скрипт с параметрами."""

"""# попытка №1 без вызова sys
def wages():
  global timework, payment, prize
  timework = int(input('Введите время выработки работником - '))
  payment = float(input('Введите по часовую ставку работника - '))
  prize =  float(input('Введте размер премии - '))
  return timework*payment + prize
print(f'заработная плата за отработанный период времени - {timework}, при окладе руб. в час - {payment}, плюс премия {prize} составит: {wages()}')

# попытка №2
from sys import argv
timework, payment, prize = argv
print('Введите время выработки работником - ', timework)
print('Введите по часовую ставку работника - ', payment)
print('Введте размер премии - ', prize)
float(timework, payment, prize)
weges = timework*payment + prize
print(f'заработная плата за отработанный период времени - {timework}, при окладе руб. в час - {payment},
 плюс премия {prize} составит: {wages()}')

# попытка №3 помогали с решением
from sys import argv
timework, payment, prize = argv
def wegs(timework, payment, prize):
    calc = (float(timework)*float(payment)+float(prize))
    return print(f'Заработная плата сотрудника составила {calc}')
    
if __name__ == '__main__':
    wegs(timework, payment, prize)
"""

"""2. Представлен список чисел. Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123]."""
# Сгененрировать список
from random import randint
RandomeList = []
N =int(input('Введите длину списка '))
n=0
while n < N:
    RandomeList.append((randint(0, 100)))
    n = n + 1
# сравнить по парно значения и вывести новый список
print(f'пример исходного списка : {RandomeList}')
new_list = []
i=0
list(RandomeList)
for i in range(i, ((len(RandomeList)//2)*2), 2):
    if RandomeList[i]<=RandomeList[i+1]:
        new_list.append(RandomeList[i+1])
        i+=2
    else:
        new_list.append(RandomeList[i])
        i+=2
print(new_list)

"""3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор."""

MyList = [el for el in range(20, 240, 1) if el % 20 == 0 or el % 21 == 0]
print(MyList)

"""4. Представлен список чисел. Определите элементы списка, не имеющие повторений. 
Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке 
их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]"""

list1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
newList = [el for el in list1 if list1.count(el) < 2]
print(newList)

"""5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат 
вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()."""

list2 = [el for el in range(99,1001, 1) if el % 2 == 0]
list3 = list2.copy()
sets = [i*j for i in list2 for j in list3]
sets = list(set(sets))
sets.sort()
print(f'список чётных чисел от 100 до 1000 (включая границы):{list2}')
print(f'результат вычисления произведения всех элементов списка:{sets}')


"""6. Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее.
Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание,
что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
#### Например, в первом задании выводим целые числа, начиная с 3. 
При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие,
 при котором повторение элементов списка прекратится."""
a, b = int(input('Введите начальное значение для списка')),int(input('Введите последнее значение для списка'))
lists=[]
from itertools import count
for el in count(a):
  if el > b:
    break
  else:
    print(el)
    lists.append(el)
print(lists)

lists2 = list(input('введите список через запятую').split(','))
from itertools import cycle
c=0
for el in cycle(lists2):
  if c > 3:
    break
  else:
    print(el)
    c += 1

"""7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). 
Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24."""
def fact(n):
    element = 1
    for el in range(1, n + 1):
       element *= el
       yield element

n = int(input("Введите число")) #конструкция была найдена, если можно разьясните ее при разборе ДЗ
for _ in fact(n):
  print(_)