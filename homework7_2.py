'''Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса
  (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

31    32         3    5    32        3    5    8    3
37    43         2    4    6         8    3    7    1
51    86        -1   64   -8
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух
объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.'''

class MyMatrix():
  def __init__(self, lists):
    self.mat = lists

  def __str__(self):
    string = ''
    for i in self.mat:
      for j in i:
        string = string + '%s\t' % (j)
      string = string[:-1]
      string = string + '\n'
    string = string[:-1]
    return string


mc_1 = [[31, 32], [37, 43], [51, 86]]
m1 = MyMatrix(mc_1)
print(m1.__str__())
mc_2 = [[3, 5, 32], [2, 4, 6], [-1, 64, -8]]
m2 = MyMatrix(mc_2)
print(m2.__str__())
mc_3 = [[3, 5, 8, 3], [8, 3, 7, 1]]
m3 = MyMatrix(mc_3)
print(m3.__str__())

'''2. Реализовать проект расчёта суммарного расхода ткани на производство одежды. 
Основная сущность (класс) этого проекта — одежда, которая может иметь определённое название. 
К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры: 
размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), 
для костюма (2*H + 0.3). Проверить работу этих методов на реальных данных.
Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: 
реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.'''

class ClothClass:
    def __init__(self, width, height):
        self.width = width
        self.height = height


class Coat(Textil):
    def __init__(self, width, height):
        super().__init__(width, height)
        self.square_c = round(self.width / 6.5 + 0.5)

    def __str__(self):
        return f'Площадь на пальто {self.square_c}'


class Jacket(Textil):
    def __init__(self, width, height):
        super().__init__(width, height)
        self.square_j = round(self.height * 2 + 0.3)

    def __str__(self):
        return f'Площадь на костюм {self.square_j}'


coat = Coat(2, 4)
jacket = Jacket(1, 2)
print(coat.get_sq_full)
print(jacket.get_sq_full)
print(coat.get_square_c())
print(jacket.get_square_j())

'''3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.'''

class CellClass:
    def __init__(self, cells):
        self.cells = cells

    def __add__(self, other):
        return CellClass(self.cells + other.cells)

    def __sub__(self, other):
        if self.cells <= other.cells:
            print('Невозможно')
            raise ValueError
        return CellClass(self.cells - other.cells)

    def __mul__(self, other):
        return CellClass(self.cells * other.cells)

    def __truediv__(self, other):
        return CellClass(round(self.cells / other.cells))

    def make_order(self, row):
        result = ''
        for i in range(int(self.cells / row)):
            result += '*' * row + '\n'
        result += '*' * (self.cells % row) + '\n'
        return result


cell = CellClass(15)
cell_2 = CellClass(8)
print(cell + cell_2)
print(cell - cell_2)
print(cell / cell_2)
print(cell * cell_2)
print(cell.make_order(10))
